import java.util.Scanner;
public class Stars {

	//编写一个main方法
	public static void main(String[] args) {

		//请编写一个程序,可以接收一个整数,表示层数(totalLever),打印出金字塔
		
		/*
		         *	 
			    * *
			   *   *
			  *     *	
			 *********
		
		 思路分析
		 化繁为简
		 1. 先打印一个矩形
		 *****
		 *****
		 *****
		 *****
		 *****
		 
		 2. 打印半个金字塔
		 *     //第1层有1个*
		 **    //第2层有2个*
		 ***   //第3层有3个*
		 ****  //第4层有4个*
		 ***** //第5层有5个*
		 
		 3. 打印整个金字塔
				 *     //第1层有1个* 2 * 1 - 1 有4=(总层数-1)个空格
				***    //第2层有3个* 2 * 2 - 1 有3=(总层数-2)个空格
			   *****   //第3层有5个* 2 * 3 - 1 有5=(总层数-3)个空格
			  *******  //第4层有7个* 2 * 4 - 1 有1=(总层数-4)个空格
			 ********* //第5层有9个* 2 * 5 - 1 有0=(总层数-5)个空格
			 
		 4. 打印空心金字塔 [最难]
		 		 *     //第1层有1个* 当前行的第一个位置是*,最后一个位置也是*
				* *    //第2层有2个* 当前行的第一个位置是*,最后一个位置也是*
			   *   *   //第3层有2个* 当前行的第一个位置是*,最后一个位置也是*
			  *     *  //第4层有2个* 当前行的第一个位置是*,最后一个位置也是*
			 ********* //第5层有9个* 全部输出
			 
		 5. 先死后活
		 5.1 层数做成变量

		 //技术到位可很快把代码写出
		 
		 */
		
		Scanner myScanner = new Scanner(System.in);
		System.out.println("请输入层数");
		int totalLever = myScanner.nextInt();
		for (int i = 1; i <= totalLever; i++) {//i表示层数
			//在输出*之前,还要输出对应数空格=总层数-当前层数
			for (int k = 1; k <= totalLever - i; k++) {
				System.out.print(" ");
			}
			//控制打印每层的*个数
			for (int j = 1; j <= 2 * i - 1; j++) {
				//当前行的第一个位置是*,最后一个位置也是*,最后一层全部*
				if (j == 1 || j == 2 * i - 1 || i == totalLever) {
					System.out.print("*");
				} else {//其他情况输出空格
					System.out.print(" ");
				}
			}
			//每打印完一层*后,就换行 println本身会换行
			System.out.println("");
		}
	}
}