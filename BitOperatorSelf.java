//位运算

public class BitOperatorSelf {

	//编写一个main方法
	public static void main(String[] args) {

		//1. 先得到 2 的补码 => 2的原码 00000000 00000000 00000000 00000010
		//   2的补码 00000000 00000000 00000000 00000010
		//2. 3的补码 => 3的原码 00000000 00000000 00000000 00000011
		//   3的补码 00000000 00000000 00000000 00000011
		//3. 按位|
		//   00000000 00000000 00000000 00000010
		//   00000000 00000000 00000000 00000011
		//   00000000 00000000 00000000 00000011 | 运算后的补码
		//   运算后的原码 也是 00000000 00000000 00000000 00000011
		//   结果就是 3
		System.out.println(2|3);//3

		//1. 先得到 2 的补码 => 2的原码 00000000 00000000 00000000 00000010
		//   2的补码 00000000 00000000 00000000 00000010
		//2. 3的补码 => 3的原码 00000000 00000000 00000000 00000011
		//   3的补码 00000000 00000000 00000000 00000011
		//3. 按位^
		//   00000000 00000000 00000000 00000010
		//   00000000 00000000 00000000 00000011
		//   00000000 00000000 00000000 00000001 ^ 运算后的补码
		//   运算后的原码 也是 00000000 00000000 00000000 00000001
		//   结果就是 1
		System.out.println(2^3);//1

		//推导
		//1. 先得到 -5 的原码 10000000 00000000 00000000 00000101
		//2. -5 的反码        11111111 11111111 11111111 11111010
		//2. -5 的补码        11111111 11111111 11111111 11111011
		//4. ~-5 操作         00000000 00000000 00000000 00000100 ~ 运算后的补码
		//5. 运算后的原码 就是 00000000 00000000 00000000 00000100 => 4
		System.out.println(~-5);//4

		//1. 先得到 13 的补码 => 13的原码 00000000 00000000 00000000 00001101
		//   13的补码 00000000 00000000 00000000 000001101
		//2. 7的补码 => 7的原码 00000000 00000000 00000000 00000111
		//   7的补码 00000000 00000000 00000000 00000111
		//3. 按位&
		//   00000000 00000000 00000000 00001101
		//   00000000 00000000 00000000 00000111
		//   00000000 00000000 00000000 00000101 & 运算后的补码
		//   运算后的原码 也是 00000000 00000000 00000000 00000101
		//   结果就是 5
		System.out.println(13&7);//5

		//1. 先得到 5 的补码 => 5的原码 00000000 00000000 00000000 00000101
		//   5的补码 00000000 00000000 00000000 00000101
		//2. 4的补码 => 4的原码 00000000 00000000 00000000 00000100
		//   4的补码 00000000 00000000 00000000 00000100
		//3. 按位|
		//   00000000 00000000 00000000 00000101
		//   00000000 00000000 00000000 00000100
		//   00000000 00000000 00000000 00000101 | 运算后的补码
		//   运算后的原码 也是 00000000 00000000 00000000 00000101
		//   结果就是 3
		System.out.println(5|4);//5

		//1. 先得到 -3 的补码 => -3的原码 10000000 00000000 00000000 00000011
		//   -3的补码 11111111 11111111 11111111 11111101
		//2. 3的补码 => 3的原码 00000000 00000000 00000000 00000011
		//   3的补码 00000000 00000000 00000000 00000011
		//3. 按位^
		//   11111111 11111111 11111111 11111101
		//   00000000 00000000 00000000 00000011
		//   11111111 11111111 11111111 11111110 ^ 运算后的补码
		//   运算后的原码 也是 10000000 00000000 00000000 00000010
		//   结果就是 -2
		System.out.println(-3^3);//-2
	}
}