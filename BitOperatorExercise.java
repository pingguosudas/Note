
public class BitOperatorExercise {

	//编写一个main方法
	public static void main(String[] args) {

		
		int a = 1 >> 2;//1 / 2 / 2 = 0

		//1. 先得到 -1 的补码 => -1的原码 10000000 00000000 00000000 00000001
		//2. -1的补码 11111111 11111111 11111111 11111111
		//3. 11111111 11111111 11111111 11111111 运算后的补码
		//4. 运算后的原码 也就是 10000000 00000000 00000000 00000001
		//5. 结果就是 -1
		int b = -1 >> 2;//-1

		int c = 1 << 2;//1 * 2 * 2 = 4

		//1. 先得到 -1 的补码 => -1的原码 10000000 00000000 00000000 00000001
		//2. -1的补码 11111111 11111111 11111111 11111111
		//3. 11111111 11111111 11111111 11111100 运算后的补码
		//4. 运算后的原码 也就是 10000000 00000000 00000000 00000100
		//5. 结果就是 -4
		int d = -1 << 2;//-4

		//1. 先得到 3 的补码 => 3的原码 00000000 00000000 00000000 00000011
		//2. 3的补码 00000000 00000000 00000000 00000011
		//3. 00000000 00000000 00000000 00000000 运算后的补码
		//4. 运算后的原码 也就是 00000000 00000000 00000000 00000000
		//5. 结果就是 0
		int e = 3 >>> 2;//0

		System.out.println(a);//0
		System.out.println(b);//-1
		System.out.println(c);//4
		System.out.println(d);//-4
		System.out.println(e);//0
	}
}